version: 2.1

##################################
##            Commands          ##
##################################
commands:
  deploy-to-cg:
    description: Deploy a cloud foundry app to cloud.gov
    parameters:
      manifest:
        type: string
        default: ./.cloudgov/manifest.yml
      action:
        type: enum
        enum: ["deploy", "restage", "task"]
        default: "deploy"
      app:
        type: string
      task-name:
        type: string
        default: ""
      task-command:
        type: string
        default: ""
    steps:
      - run:
          name: Setup environment
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              echo "export CF_SPACE=production" >> $BASH_ENV
              echo "export CF_USERNAME=$CF_USERNAME_PRODUCTION" >> $BASH_ENV
              echo "export CF_PASSWORD=$CF_PASSWORD_PRODUCTION" >> $BASH_ENV
            elif [ "$CIRCLE_BRANCH" = "staging" ]; then
              echo "export CF_SPACE=staging" >> $BASH_ENV
              echo "export CF_USERNAME=$CF_USERNAME_STAGING" >> $BASH_ENV
              echo "export CF_PASSWORD=$CF_PASSWORD_STAGING" >> $BASH_ENV
            fi

      - run:
          name: Install cloud foundry cli
          command: |
            curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx
            sudo mv cf7 /usr/local/bin/cf
            cf version

      - run:
          name: Log into cloud.gov
          command: |
            cf api https://api.fr.cloud.gov
            cf login -u $CF_USERNAME -p $CF_PASSWORD -o gsa-18f-federalist -s $CF_SPACE

      - when:
          condition:
            equal: ["deploy", << parameters.action >> ]
          steps:
            - run:
                name: Deploy app '<< parameters.app >>'
                command: |
                  set +e

                  onerr() {
                    echo "Deployment failed, cancelling."
                    cf cancel-deployment << parameters.app >>
                    cf logout
                    exit 1
                  }
                  trap 'onerr' ERR

                  cf push << parameters.app >> \
                    --strategy rolling \
                    --vars-file "./.cloudgov/vars/${CF_SPACE}.yml" \
                    -f << parameters.manifest >>

      - when:
          condition:
            equal: ["task", << parameters.action >> ]
          steps:
            - run:
                name: Run task '<< parameters.task-name >>' from app '<< parameters.app >>'
                command: |
                  cf run-task << parameters.app >> --name << parameters.task-name >> --command "<< parameters.task-command >>"

      - when:
          condition:
            equal: ["restage", << parameters.action >> ]
          steps:
            - run:
                name: Restage app '<< parameters.app >>'
                command: |
                  cf restage << parameters.app >> --strategy rolling


      - run:
          name: Log out from cloud.gov
          command: cf logout


##################################
##             Jobs             ##
##################################
jobs:
  build:
    docker:
      - image: cimg/node:16.13
        environment:
          YARN_VERSION: 0.24.6-1
          CC_TEST_REPORTER_ID: 101a439651b6abd27e5440028a53b5b8f08fe0889f3948d5f58f6cf9f7c786a0
      - image: cimg/postgres:9.6
        environment:
          POSTGRES_USER: ci-test-user
          POSTGRES_DB: federalist-ci-test
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: cimg/redis:5.0
        environment:
          REDIS_PORT: 6379
    steps:
      - checkout

      - run:
          name: Display versions
          command: |
            echo $(node --version)
            echo $(yarn --version)
            echo $(npm --version)

      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}

      - run:
          name: Install dependencies
          command: yarn --pure-lockfile

      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ~/.cache/yarn

      - run:
          name: Lint api and user client
          command: yarn lint

      - run:
          name: CodeClimate before-build
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build

      - run:
          name: Run tests
          command: yarn test:cover
          environment:
            APP_HOSTNAME: http://localhost:1337
            PRODUCT: federalist
            CLOUD_FOUNDRY_API_HOST: https://api.example.com
            CLOUD_FOUNDRY_OAUTH_TOKEN_URL: https://login.example.com/oauth/token
            CF_API_USERNAME: deploy_user
            CF_API_PASSWORD: deploy_pass
            FEATURE_AUTH_GITHUB: 'true'
            FEATURE_AUTH_UAA: 'false'

      - run:
          name: CodeClimate combine and upload coverage
          command: |
            # Combine the test coverage reports in coverage/server/ and coverage/client/
            ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.client.json coverage/client/lcov.info
            ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.server.json coverage/server/lcov.info
            ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
            # Attempt to submit a report, but don't fail the build if this fails (`|| true`)
            ./cc-test-reporter upload-coverage || true

  deploy:
    docker:
      - image: cimg/node:16.13
    parameters:
      app:
        type: string
      app-hostname:
        type: string        
    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}

      - run:
          name: Build app
          environment:
            APP_HOSTNAME: << parameters.app-hostname >>
            PRODUCT: federalist
          command: yarn build

      - deploy-to-cg:
          app: << parameters.app >>

  deploy-admin-client:
    docker:
      - image: cimg/node:16.13
    parameters:
      app:
        type: string
      api-domain:
        type: string
      api-url:
        type: string
    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-admin-{{ checksum "admin-client/yarn.lock" }}

      - run:
          name: Install dependencies
          command: yarn --frozen-lockfile --cache-folder ./.cache
          working_directory: ./admin-client

      - save_cache:
          key: dependency-cache-admin-{{ checksum "admin-client/yarn.lock" }}
          paths:
            - ./admin-client/node_modules
            - ./admin-client/.cache/yarn

      - run:
          name: Build app
          command: yarn build
          working_directory: ./admin-client
          environment:
            NODE_ENV: production
            API_URL: << parameters.api-url >>

      - run:
          name: Configure Nginx
          command: ci/tasks/configure-admin-client-nginx.sh
          environment:
            API_DOMAIN: << parameters.api-domain >>

      - deploy-to-cg:
          app: << parameters.app >>

  deploy-queues-ui:
    docker:
      - image: cimg/node:16.13
    parameters:
      app:
        type: string
    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}

      - deploy-to-cg:
          app: << parameters.app >>

  restage:
    docker:
      - image: cimg/base:2021.04
    parameters:
      app:
        type: string
    steps:
      - checkout

      - deploy-to-cg:
          app: << parameters.app >>
          action: restage

  run-task:
    docker:
      - image: cimg/base:2021.04
    parameters:
      app:
        type: string
      task-name:
        type: string
      task-command:
        type: string
    steps:
      - checkout

      - deploy-to-cg:
          app: << parameters.app >>
          action: task
          task-name: << parameters.task-name >>
          task-command: << parameters.task-command >>


##################################
##          Workflows           ##
##################################
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build

      - deploy:
          name: deploy-production
          app: federalistapp
          app-hostname: https://federalistapp.18f.gov
          requires:
            - build
          filters:
            branches:
              only: main

      - run-task:
          name: run-migrations-production
          app: federalistapp
          task-name: run-migrations
          task-command: yarn run migrate:up
          requires:
            - build
            - deploy-production
          filters:
            branches:
              only: main
      
      - deploy-admin-client:
          name: deploy-admin-production
          app: federalist-admin
          api-domain: federalistapp.18f.gov
          api-url: https://federalistapp.18f.gov
          requires:
            - build
          filters:
            branches:
              only: main

      - deploy-queues-ui:
          name: deploy-queues-ui-production
          app: federalist-queues-ui
          requires:
            - build
          filters:
            branches:
              only: main

      - deploy:
          name: deploy-staging
          app: federalistapp-staging
          app-hostname: https://federalistapp-staging.18f.gov
          requires:
            - build
          filters:
            branches:
              only: staging

      - run-task:
          name: run-migrations-staging
          app: federalistapp-staging
          task-name: run-migrations
          task-command: yarn run migrate:up
          requires:
            - build
            - deploy-staging
          filters:
            branches:
              only: staging

      - deploy-admin-client:
          name: deploy-admin-staging
          app: federalist-admin-staging
          api-domain: federalistapp-staging.18f.gov
          api-url: https://federalistapp-staging.18f.gov
          requires:
            - build
          filters:
            branches:
              only: staging

      - deploy-queues-ui:
          name: deploy-queues-ui-staging
          app: federalist-queues-ui-staging
          requires:
            - build
          filters:
            branches:
              only: staging

  nightly:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - main
                - staging

    jobs:
      - restage:
          matrix:
            parameters:
              app:
                - federalistapp
                - federalist-admin
                - federalist-queues-ui
          filters:
            branches:
              only: main

      - restage:
          matrix:
            parameters:
              app:
                - federalistapp-staging
                - federalist-admin-staging
                - federalist-queues-ui-staging
          filters:
            branches:
              only: staging
