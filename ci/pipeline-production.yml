############################
#  SHARED

env-cf: &env-cf
  CF_API: https://api.fr.cloud.gov
  CF_USERNAME: ((((deploy-env))-cf-username))
  CF_PASSWORD: ((((deploy-env))-cf-password))
  CF_ORG: gsa-18f-federalist
  CF_SPACE: ((deploy-env))
  CF_STACK: cflinuxfs4

test-api: &test-api
  - in_parallel:
    - get: redis
      params: {save: true}
    - get: postgres
      params: {save: true}
    - get: node
      params: {save: true}

  - task: install-deps-api
    file: src/ci/partials/install-deps-api.yml
    image: node

  - in_parallel:
    - task: lint-api
      file: src/ci/partials/lint-api.yml
      image: node

    - task: test-api
      privileged: true
      file: src/ci/partials/test-api.yml

test-admin-client: &test-admin-client
  - task: install-deps-admin-client
    file: src/ci/partials/install-deps-admin-client.yml
    image: node

  - task: lint-admin-client
    file: src/ci/partials/lint-admin-client.yml
    image: node

  - task: build-admin-client
    file: src/ci/partials/build-admin-client.yml
    image: node
    params:
      API_URL: https://((((deploy-env))-pages-domain))
      NODE_ENV: production

# ############################
# #  JOBS

jobs:
  - name: test-and-deploy-api-pages-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        passed: [set-pipeline]
        trigger: true
        params: {depth: 1}
      - put: gh-status
        inputs: [src]
        params: {state: pending}
      - get: cf-image
      - do: *test-api
      - task: build-api
        file: src/ci/partials/build-api.yml
        image: node
        params:
          APP_HOSTNAME: https://((((deploy-env))-pages-domain))
          PROXY_DOMAIN: sites.((((deploy-env))-pages-domain))

      - task: deploy-api
        file: src/ci/partials/deploy.yml
        image: cf-image
        params:
          <<: *env-cf
          CF_APP_NAME: pages-((deploy-env))
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src
        on_failure:
          try:
            task: cancel-api-deployment
            file: src/ci/partials/cancel-deployment.yml
            image: cf-image
            params:
              <<: *env-cf
              CF_APP_NAME: pages-((deploy-env))

      - task: run-database-migrations
        file: src/ci/partials/run-task.yml
        image: cf-image
        params:
          <<: *env-cf
          APP_ENV: ((deploy-env))
          CF_APP_NAME: pages-((deploy-env))
          CF_TASK_NAME: run-migrations
          CF_TASK_COMMAND: 'yarn run migrate:up'
        on_failure:
          in_parallel:
            - put: gh-status
              inputs: [src]
              params: {state: failure}
            - put: slack
              params:
                text: |
                  :x: FAILED: to migrate database for pages ((deploy-env))
                  <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
                channel: ((slack-channel))
                username: ((slack-username))
                icon_url: ((slack-icon-url))

    on_failure:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: failure}
        - put: slack
          params:
            text: |
              :x: FAILED: api deployment on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: success}
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed api on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: test-and-deploy-admin-client-pages-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        passed: [set-pipeline]
        trigger: true
        params: {depth: 1}
      - get: node
      - put: gh-status
        inputs: [src]
        params: {state: pending}

      - do: *test-admin-client
      - get: cf-image
      - task: configure-nginx
        file: src/ci/partials/configure-nginx.yml
        image: cf-image
        params:
          API_DOMAIN: ((((deploy-env))-pages-domain))

      - task: deploy-admin-client
        file: src/ci/partials/deploy.yml
        image: cf-image
        params:
          <<: *env-cf
          CF_APP_NAME: pages-admin-((deploy-env))
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src/admin-client
        on_failure:
          try:
            task: cancel-admin-client-deployment
            file: src/ci/partials/cancel-deployment.yml
            image: cf-image
            params:
              <<: *env-cf
              CF_APP_NAME: pages-admin-((deploy-env))

    on_failure:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: failure}
        - put: slack
          params:
            text: |
              :x: FAILED: admin client deployment on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

    on_success:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: success}
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed admin client on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: deploy-queues-ui-pages-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        passed: [set-pipeline]
        trigger: true
        params: {depth: 1}
      - put: gh-status
        inputs: [src]
        params: {state: pending}
      - get: cf-image
      - task: deploy-queues-ui
        file: src/ci/partials/deploy.yml
        image: cf-image
        params:
          <<: *env-cf
          CF_APP_NAME: pages-queues-ui-((deploy-env))
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src
        on_failure:
          try:
            task: cancel-queues-ui-deployment
            file: src/ci/partials/cancel-deployment.yml
            image: cf-image
            params:
              <<: *env-cf
              CF_APP_NAME: pages-queues-ui-((deploy-env))
    on_failure:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: failure}
        - put: slack
          params:
            text: |
              :x: FAILED: pages queues UI deployment on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      in_parallel:
        - put: gh-status
          inputs: [src]
          params: {state: success}
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed pages queues UI on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: nightly-tasks-pages-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        passed: [set-pipeline]
        params: {depth: 1}
      - get: cf-image
      - get: nightly
        trigger: true
      - in_parallel:
        - task: restage-api
          file: src/ci/partials/restage.yml
          image: cf-image
          params:
            <<: *env-cf
            CF_APP_NAME: pages-((deploy-env))
        # - task: restage-queues-ui
        #   file: src/ci/partials/restage.yml
        #   image: cf-image
        #   params:
        #     <<: *env-cf
        #     CF_APP_NAME: pages-queues-ui-((deploy-env))

  - name: sites-builds-checks-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        passed: [set-pipeline]
        params: {depth: 1}
      - get: cf-image
      - get: five-minutes
        trigger: true
      - in_parallel:
        - task: queued-builds-check
          file: src/ci/partials/run-task.yml
          image: cf-image
          params:
            <<: *env-cf
            CF_APP_NAME: pages-((deploy-env))
            CF_TASK_NAME: queued-builds-check
            CF_TASK_COMMAND: yarn queued-builds-check ((support-email))
        on_failure:
          in_parallel:
            - put: slack
              params:
                text: |
                  :x: FAILED: sites builds checks on pages ((deploy-env))
                  <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
                channel: ((slack-channel))
                username: ((slack-username))
                icon_url: ((slack-icon-url))

  - name: release
    plan:
    - get: src
      resource: src-((deploy-env))-tagged
      params: {depth: 1}
      trigger: true
      passed: [set-pipeline]
    - get: cf-image
    - task: get-changelog-version
      image: cf-image
      config:
        platform: linux
        inputs:
          - name: src
        outputs:
          - name: src
        run:
          dir: src
          path: ci/tasks/get-changelog-version.sh
    - put: pages-release
      params:
        name: src/.git/ref
        tag: src/.git/ref
        body: src/releaselog.md
    - put: slack-cg-pages
      params:
        text_file: src/slackrelease.md
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: set-pipeline
    plan:
    - get: src
      resource: src-((deploy-env))-tagged
      params: {depth: 1}
      trigger: true
    - set_pipeline: core
      file: src/ci/pipeline-production.yml
      instance_vars:
        deploy-env: ((deploy-env))

############################
#  RESOURCES

resources:
  - name: src-((deploy-env))-tagged
    type: git
    icon: github
    source:
      uri: ((git-base-url))/((pages-repository-path))
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      tag_filter: 0.*.*
      fetch_tags: true

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York

  - name: five-minutes
    type: time
    source:
      interval: 5m

  - name: redis
    type: docker-image
    source:
      repository: redis
      tag: 5-alpine

  - name: postgres
    type: docker-image
    source:
      repository: postgres
      tag: 11-alpine

  - name: node
    type: docker-image
    source:
      repository: node
      tag: 18.15

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: slack-cg-pages
    type: slack-notification
    source:
      url: ((slack-webhook-url-cg-pages))

  - name: gh-status
    type: cogito
    check_every: 1h
    source:
      owner: cloud-gov
      repo: pages-core
      access_token: ((gh-access-token))
      context_prefix: concourse

  - name: cf-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: harden-concourse-task
      aws_region: us-gov-west-1
      tag: ((harden-concourse-task-tag))

  - name: pages-release
    type: github-release
    source:
      owner: cloud-gov
      repository: pages-core
      access_token: ((gh-access-token))


############################
#  RESOURCE TYPES

resource_types:

  - name: github-release
    type: registry-image
    source:
      repository: concourse/github-release-resource

  - name: cogito
    type: docker-image
    check_every: 24h
    source:
      repository: pix4d/cogito

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
