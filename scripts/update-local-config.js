const { exec } = require('child_process');
const fs = require('fs');

const app = 'federalistapp-staging';
const space = 'staging';
const org = 'gsa-18f-federalist';
const localConfigPath = './config/local-from-staging.js';

function showUsage({ alreadyLoggedIn = true } = {}) {
  /* eslint-disable no-console */
  console.log('\nWhoops, something went wrong.');
  console.log(`Please make sure you are logged in to cloud.gov and targeting ${org} / ${space}.`);
  console.log('Do this by running:');

  if (alreadyLoggedIn) {
    console.log(`\tcf target -o ${org} -s ${space}`);
  } else {
    console.log(`\tcf login --sso -a https://api.fr.cloud.gov -o ${org} -s ${space}`);
    console.log('and following the single-sign on instructions it provides.');
  }

  console.log('Then run this command again.');
  /* eslint-enable no-console */
}

function updateLocalConfig(vcapJson) {
  const s3Creds = vcapJson.VCAP_SERVICES.s3[0].credentials;

  const newConfig = {
    s3: {
      accessKeyId: s3Creds.access_key_id,
      secretAccessKey: s3Creds.secret_access_key,
      region: s3Creds.region,
      bucket: s3Creds.bucket,
    },
  };

  const contents = [
    '// Do not edit this file directly. Instead run the "update-local-config" script.',
    '// This file is sensitive. Do not commit it to GitHub or share it.',
    'if (process.env.NODE_ENV !== \'test\') {',
    `  module.exports = ${JSON.stringify(newConfig, null, 2)};`,
    '}',
    '\n',
  ].join('\n');

  fs.writeFileSync(localConfigPath, contents, { encoding: 'utf-8' });
}

function getVcapJson(stdout) {
  // This is a bit silly, but since the output of `cf env` is a mixture
  // of text and JSON content, we do some simple detection to find
  // where the "VCAP_SERVICES" JSON exists within that output,
  // and read it into a real JSON object, which is returned from this function.
  const lines = stdout.split('\n');
  const vcapLines = [];
  let readingVcap = false;
  let i = 0;

  while (i < lines.length) {
    let line = lines[i];
    i += 1;

    // start reading at the first opening bracket that starts a line
    if (line.includes('VCAP_SERVICES: {')) {
      line = line.replace('VCAP_SERVICES: {', '"VCAP_SERVICES": {');
      readingVcap = true;
    }

    if (readingVcap) {
      vcapLines.push(line);
    }

    // stop reading at the first closing bracket that starts a line
    if (line.indexOf('}') === 0) {
      break;
    }
  }

  return JSON.parse(`{ ${vcapLines.join('\n')} }`);
}

exec(`cf env ${app}`, (err, stdout) => {
  if (err) {
    showUsage();
    return;
  }

  if (stdout.indexOf(`App ${app} not found`) > -1) {
    showUsage();
    return;
  }

  if (stdout.indexOf('Not logged in') > -1) {
    showUsage({ alreadyLoggedIn: false });
    return;
  }

  const vcap = getVcapJson(stdout);
  updateLocalConfig(vcap);

  // eslint-disable-next-line no-console
  console.log(`Success! Wrote values to ${localConfigPath}.`);
});
