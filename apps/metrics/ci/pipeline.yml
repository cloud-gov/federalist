############################
#  SHARED

env-cf: &env-cf
  CF_API: https://api.fr.cloud.gov
  CF_USERNAME: ((((deploy-env))-cf-username))
  CF_PASSWORD: ((((deploy-env))-cf-password))
  CF_ORG: gsa-18f-federalist
  CF_SPACE: ((deploy-env))

node-image: &node-image
  type: docker-image
  source:
    repository: node
    tag: 16

cf-image: &cf-image
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: 18fgsa/concourse-task

test-metrics: &test-metrics
  - task: install-dev-deps-metrics
    output_mapping:
      src-metrics: src-metrics-dev
    config:
      platform: linux
      image_resource:
        <<: *node-image
      inputs: [name: src-metrics]
      outputs: [name: src-metrics]
      run:
        dir: src-metrics/apps/metrics
        path: bash
        args: [-c, yarn --pure-lockfile]

  - in_parallel:
    - task: lint-metrics
      config:
        platform: linux
        image_resource:
          <<: *node-image
        inputs: [name: src-metrics-dev]
        run:
          dir: src-metrics-dev/apps/metrics
          path: bash
          args: [-c, yarn lint]

    - task: test-metrics
      config:
        platform: linux
        image_resource:
          <<: *node-image
        inputs: [name: src-metrics-dev]
        run:
          dir: src-metrics-dev/apps/metrics
          path: bash
          args: [-c, yarn test]


############################
#  JOBS

jobs:
  - name: test-metrics-((deploy-env))
    plan:
      - get: src-metrics
        resource: pr-((deploy-env))
        trigger: true
        version: every
      - put: src-metrics
        resource: pr-((deploy-env))
        params:
          path: src-metrics
          status: pending
          base_context: concourse
          context: test-metrics

      - do: *test-metrics

    on_failure:
      in_parallel:
        - put: src-metrics
          resource: pr-((deploy-env))
          params:
            path: src-metrics
            status: failure
            base_context: concourse
            context: test-metrics
        - put: slack
          params:
            text: |
              :x: FAILED: pages metrics tests on ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

    on_success:
      in_parallel:
        - put: src-metrics
          resource: pr-((deploy-env))
          params:
            path: src-metrics
            status: success
            base_context: concourse
            context: test-metrics
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully tested pages metrics on ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: test-and-deploy-metrics-((deploy-env))
    plan:
      - get: src-metrics
        resource: src-((deploy-env))
        passed: [set-pipeline-((deploy-env))]
        params: {depth: 1}
        trigger: true
      - put: gh-status
        inputs: [src-metrics]
        params: {state: pending}

      - do: *test-metrics

      - task: install-prod-deps-metrics
        output_mapping:
          src-metrics: src-metrics-prod
        config:
          platform: linux
          image_resource:
            <<: *node-image
          inputs: [name: src-metrics]
          outputs: [name: src-metrics]
          run:
            dir: src-metrics/apps/metrics
            path: bash
            args: [-c, yarn --pure-lockfile --production]

      - task: deploy-metrics
        config:
          <<: *cf-image
          inputs: [name: src-metrics-prod]
          run:
            dir: src-metrics-prod/apps/metrics
            path: ci/tasks/deploy.sh
        params:
          <<: *env-cf
          CF_APP_NAME: pages-metrics
          CFVAR_cf_api_username: "'((cf-org-auditor-username))'"
          CFVAR_cf_api_password: "'((cf-org-auditor-password))'"
          CFVAR_new_relic_license_key: "'((new-relic-metrics-license-key))'"
        on_failure:
          try:
            task: cancel-metrics-deployment
            config:
              <<: *cf-image
              inputs: [name: src-metrics-prod]
              run:
                dir: src-metrics-prod/apps/metrics
                path: ci/tasks/cancel-deployment.sh
            params:
              <<: *env-cf
              CF_APP_NAME: pages-metrics

    on_failure:
      in_parallel:
        - put: gh-status
          inputs: [src-metrics]
          params: {state: failure}
        - put: slack
          params:
            text: |
              :x: FAILED: metrics deployment on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

    on_success:
      in_parallel:
        - put: gh-status
          inputs: [src-metrics]
          params: {state: success}
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed metrics on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: nightly-tasks-metrics-((deploy-env))
    plan:
      - get: src-metrics
        resource: src-((deploy-env))
        passed: [set-pipeline-((deploy-env))]
        params: {depth: 1}
      - get: nightly
        trigger: true
      - task: restage-metrics
        config:
          inputs: [name: src-metrics]
          <<: *cf-image
          run:
            dir: src-metrics/apps/metrics
            path: ci/tasks/restage.sh
        params:
          <<: *env-cf
          CF_APP_NAME: pages-metrics

  - name: set-pipeline-((deploy-env))
    serial: true
    plan:
      - get: src-metrics
        resource: src-((deploy-env))
        params: {depth: 1}
        trigger: true
      - set_pipeline: metrics
        file: src-metrics/apps/metrics/ci/pipeline.yml
        instance_vars:
          deploy-env: ((deploy-env))
          git-branch: ((git-branch))

############################
#  RESOURCES

resources:

  - name: pr-((deploy-env))
    type: pull-request
    check_every: 1m
    source:
      repository: ((pages-repository-path))
      access_token: ((gh-access-token))
      base_branch: ((git-branch))
      disable_forks: true
      ignore_drafts: false

  - name: src-((deploy-env))
    type: git
    icon: github
    source:
      uri: ((git-base-url))/((pages-repository-path))
      branch: ((git-branch))

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: gh-status
    type: cogito
    check_every: 1h
    source:
      owner: cloud-gov
      repo: pages-core
      access_token: ((gh-access-token))
      context_prefix: concourse

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York


############################
#  RESOURCE TYPES

resource_types:

  - name: cogito
    type: docker-image
    check_every: 24h
    source:
      repository: pix4d/cogito

  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
